# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[3:14]
new_df$Price = new_df$Price*100000
auto_data = new_df
# Checking
sum(is.na(auto_data))==0
View(new_df)
View(new_df)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
View(auto_data)
View(auto_data)
View(new_df)
View(new_df)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[3:14]
new_df$Price = new_df$Price*100000
auto_data = new_df
# Checking
sum(is.na(auto_data))==0
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
# Building Linear Regression Model
Linear_Model = train(Price ~ ., data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
install.packages('fastDummies')
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[3:14]
new_df$Price = new_df$Price*100000
# Checking
sum(is.na(auto_data))==0
View(new_df)
View(new_df)
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Manufacturer', 'Location',
'Fuel_Type','Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
library(fastDummies)
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Manufacturer', 'Location',
'Fuel_Type','Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
# Building Linear Regression Model
Linear_Model = train(Price ~ ., data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
View(pred_df)
View(pred_df)
summary(Linear_Model)
View(auto_data)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[3:14]
View(new_df)
View(new_df)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[5:14]
new_df$Price = new_df$Price*100000
# Checking
sum(is.na(auto_data))==0
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Fuel_Type',
'Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
# Building Linear Regression Model
Linear_Model = train(Price ~ ., data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
Linear_Model = lm(Price~., data=train)
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[5:14]
new_df$Price = new_df$Price*100000
# Checking
sum(is.na(auto_data))==0
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Fuel_Type',
'Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
Linear_Model = lm(Price~., data=train)
pred_result = predict(Linear_Model, newdata = test)
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
View(pred_df)
View(pred_df)
summary(Linear_Model)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df = new_df[5:14]
new_df$Price = new_df$Price*100000
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
Linear_Model = lm(Price~Engine.CC+Power+Mileage.Km.L+Kilometers_Driven, data=train)
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
Linear_Model = lm(Price~Engine.CC, data=train)
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
Linear_Model = lm(Price~Mileage.Km.L, data=train)
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
View(auto_data)
View(auto_data)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df %>% filter(Price<70) -> new_df
new_df = new_df[5:14]
new_df$Price = new_df$Price*100000
# Checking
sum(is.na(auto_data))==0
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
Linear_Model = lm(Price~Mileage.Km.L, data=train)
Linear_Model = lm(Price~.L, data=train)
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
# Building Linear Regression Model
Linear_Model = train(Price ~ ., data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
View(Linear_Model)
View(Linear_Model)
new_df = new_df[3:14]
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df %>% filter(Price<70) -> new_df
new_df = new_df[3:14]
new_df$Price = new_df$Price*100000
View(new_df)
View(new_df)
View(new_df)
View(new_df)
new_df = new_df[,-2]
View(new_df)
View(new_df)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df %>% filter(Price<70) -> new_df
new_df = new_df[3:14]
new_df = new_df[,-2]
new_df$Price = new_df$Price*100000
View(new_df)
View(new_df)
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Manufacturer','Fuel_Type',
'Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
# Building Linear Regression Model
Linear_Model = train(Price ~ ., data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
View(pred_data)
View(pred_data)
training <-predict(Linear_Model, train) # Apply model to make prediction on Training set
testing <-predict(Linear_Model, test) # Apply model to make prediction on Testing set
# Model performance (Displays scatter plot and performance metrics)
# Scatter plot of Training set
plot(Training$Price,training, col = "blue" )
plot(Testing$Price,testing, col = "blue" )
# Model performance (Displays scatter plot and performance metrics)
# Scatter plot of Training set
plot(training$Price,training, col = "blue" )
plot(testing$Price,testing, col = "blue" )
# Model performance (Displays scatter plot and performance metrics)
# Scatter plot of Training set
plot(train$Price,training, col = "blue" )
plot(test$Price,testing, col = "blue" )
# Building Linear Regression Model
Linear_Model = train(Price ~ poly(.,3), data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Building Linear Regression Model
Linear_Model = train(Price ~ .+poly(Power,3), data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
# Building Linear Regression Model
Linear_Model = train(Price ~ .+poly(Power,3)+poly(Seats,3)+poly(Mileage.Km.L,3)+poly(Engine.CC,3), data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
summary(Linear_Model)
# Building Linear Regression Model
Linear_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5), data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
summary(Linear_Model)
# Building Linear Regression Model
Linear_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)++poly(Year,5), data = train,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
pred_result = predict(Linear_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
# Building Linear Regression Model
ML_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)+poly(Year,5),
data = train, method = "lm",na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Prediction
pred_result = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
rmse = sqrt(mean(error^2))
View(Linear_Model)
View(Linear_Model)
View(ML_Model)
View(ML_Model)
pred_df = cbind(pred_df,error)
auto_
library(fastDummies)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df %>% filter(Price<70) -> new_df
new_df = new_df[3:14]
new_df = new_df[,-2]
new_df$Price = new_df$Price*100000
# Checking
sum(is.na(auto_data))==0
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Manufacturer','Fuel_Type',
'Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
# Building Linear Regression Model
ML_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)+poly(Year,5),
data = auto_data, method = "lm",na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=pred_result)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
rmse = sqrt(mean(error^2))
training <-predict(Linear_Model, train) # Apply model to make prediction on Training set
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price, Predicted=test_pred_data)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
View(pred_df)
View(pred_df)
rmse = sqrt(mean(error^2))
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price/100000, Predicted=test_pred_data/100000)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
rmse = sqrt(mean(error^2))
library(plotly)
# Plotting Prediction vs Actual values
plot_ly(x=pred_df$Actual,y=pred_df$Predicted)
# Building Linear Regression Model
ML_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)+poly(Year,5)+poly(Kilometers_Driven,5),
data = auto_data, method = "lm",na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price/100000, Predicted=test_pred_data/100000)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
rmse = sqrt(mean(error^2))
# Building Linear Regression Model
ML_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)+poly(Year,5)#+poly(Kilometers_Driven,5),
data = auto_data, method = "lm",na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price/100000, Predicted=test_pred_data/100000)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
rmse = sqrt(mean(error^2))
# Building Linear Regression Model
ML_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)+poly(Year,5)+poly(Seats,5),
data = auto_data, method = "lm",na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price/100000, Predicted=test_pred_data/100000)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
rmse = sqrt(mean(error^2))
# Plotting Prediction vs Actual values
plot_ly(x=pred_df$Actual,y=pred_df$Predicted)
summary(ML_Model)
explained_variance_score(1,1)
rsq
cor()
library(caTools)
library(caret)
library(fastDummies)
library(plotly)
auto_data = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/indian-auto-mpg.csv")
# Cleaning Data
new_df = auto_data
new_df %>% filter(Seats>0) -> new_df
new_df %>% filter(Mileage.Km.L>0) -> new_df
new_df %>% filter(Price<70) -> new_df
new_df = new_df[3:14]
new_df = new_df[,-2]
new_df$Price = new_df$Price*100000
# Checking
sum(is.na(auto_data))==0
# Creating dummy variables for categorical variables
new_df <- dummy_cols(new_df,
select_columns = c('Manufacturer','Fuel_Type',
'Transmission','Owner_Type'),
remove_selected_columns = TRUE)
auto_data = new_df
# Train Test Split
sample.split(auto_data$Price, SplitRatio = 0.85) -> split_tag
subset(auto_data, split_tag==T) -> train
subset(auto_data, split_tag==F) -> test
# Building Linear Regression Model
ML_Model = train(Price ~ .+poly(Power,5)+poly(Engine.CC,5)+poly(Year,5)+poly(Seats,5),
data = auto_data, method = "lm",na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none"))
# Prediction
test_pred_data = predict(ML_Model, newdata = test)
pred_data = cbind(Actual=test$Price/100000, Predicted=test_pred_data/100000)
pred_df = as.data.frame(pred_data)
error = (pred_df$Actual-pred_df$Predicted)
pred_df = cbind(pred_df,error)
rmse = sqrt(mean(error^2))
# Plotting Prediction vs Actual values
fit <- lm(Predicted ~ Actual, data = pred_df)
pred_df %>% plot_ly(x = ~Actual) %>%
add_markers(y = ~Predicted, name="Scatter") %>%
add_lines(x = ~Actual, y = fitted(fit), name="Regression Line")%>%
layout(xaxis = list(title = "Actual"),
yaxis = list(title = "Predicted"))
validate_df = read.csv("C://Users/subha/Desktop/Visualization & Analysis on Automobile Dataset using Machine Learning in R/validate.csv")
val_pred_df = predict(ML_Model, newdata = validate_df)
predict_data = cbind(Actual=validate_df$Price/100000, Predicted=predict_df/100000)
val_pred_df = as.data.frame(predict_data)
error = (val_pred_df$Actual-val_pred_df$Predicted)
val_pred_df = cbind(val_pred_df,error)
rmse = sqrt(mean(error^2))
View(pred_df)
View(pred_df)
cor(pred_df$Actual, pred_df$Predicted)
cor(pred_df$Actual, pred_df$Predicted)^2
